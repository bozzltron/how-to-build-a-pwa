{"version":3,"sources":["serviceWorker.js","Prompt.js","App.js","useFortune.js","useIOSPrompt.js","index.js"],"names":["navigator","window","addEventListener","serviceWorker","register","then","reg","console","log","registeredServiceWorker","pushManager","getSubscription","sub","Notification","permission","applicationServerKey","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","urlB64ToUint8Array","PUSH_PUBLIC_KEY","subscribe","userVisibleOnly","subscription","updateSubscriptionOnServer","catch","err","subscribeUser","e","callback","JSON","stringify","Prompt","useState","style","setStyle","useEffect","setTimeout","className","src","alt","App","fortune","setFortune","a","fetch","res","json","fortunes","rando","Math","floor","random","message","fetchData","useFortune","showPrompt","setShowPrompt","userAgent","toLowerCase","test","isIos","standalone","useIOSPrompt","ReactDOM","render","document","getElementById"],"mappings":"gHACI,kBAAmBA,WAErBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cAAcC,SAAS,sBAChCC,MAAK,SAASC,GACbC,QAAQC,IAAI,6BACZC,EAA0BH,EAEvBA,EAAII,aAELJ,EAAII,YAAYC,kBAAkBN,MAAK,SAASO,GAClC,OAARA,EAC4B,WAA3BC,aAAaC,YAsC5B,WACE,IAAMC,EAjBR,SAA4BC,GAU1B,IARA,IAAMC,EAAU,IAAIC,QAAQ,EAAIF,EAAaG,OAAS,GAAK,GACrDC,GAAUJ,EAAeC,GAC5BI,QAAQ,MAAO,KACfA,QAAQ,KAAM,KAEXC,EAAUrB,OAAOsB,KAAKH,GACtBI,EAAc,IAAIC,WAAWH,EAAQH,QAElCO,EAAI,EAAGA,EAAIJ,EAAQH,SAAUO,EACpCF,EAAYE,GAAKJ,EAAQK,WAAWD,GAEtC,OAAOF,EAIsBI,CAAmB3B,OAAO4B,iBACvDpB,EAAwBC,YAAYoB,UAAU,CAC5CC,iBAAiB,EACjBhB,qBAAsBA,IAEvBV,MAAK,SAAS2B,GACbzB,QAAQC,IAAI,uBAEZyB,EAA2BD,MAG5BE,OAAM,SAASC,GACd5B,QAAQC,IAAI,iCAAkC2B,MAlDpCC,GAIFH,EAA2BrB,MAG9BsB,OAAM,SAASG,GACd9B,QAAQC,IAAI6B,YAWtB,IAAI5B,EAA0B,KAmC9B,SAASwB,EAA2BD,EAAcM,GAChD/B,QAAQC,IAAI,oBAAqB+B,KAAKC,UAAUR,M,+GC7CnCS,MAtBf,WAAmB,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,KAchB,OAXAC,qBAAU,WAGNC,YAAW,WACTF,EAAS,UAET,QAMJ,yBAAKG,UAAS,iBAAYJ,IAA1B,2CAC0C,yBAAKK,IAAI,YAAYC,IAAI,oBADnE,gCCCWC,MAbf,WACE,IAAIC,ECHS,WAAuB,IAAD,EACLT,mBAAS,IADJ,mBAC5BS,EAD4B,KACnBC,EADmB,KAcnC,OAXAP,qBAAU,WAAM,4CACd,8BAAAQ,EAAA,sEACuBC,MAAM,uDAAuDjD,MAAK,SAAAkD,GAAG,OAAIA,EAAIC,UADpG,QACMC,EADN,UAGQC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAStC,QAAU,EAC1DiC,EAAWK,EAASC,GAAOI,UAJ/B,4CADc,uBAAC,WAAD,wBAQdC,KACC,IAEIZ,EDXOa,GACVC,EELS,WAAyB,IAAD,EACDvB,oBAAS,GADR,mBAC9BuB,EAD8B,KAClBC,EADkB,KAkBrC,OAfArB,qBAAU,YAEI,WACV,IAAMsB,EAAYlE,OAAOD,UAAUmE,UAAUC,cAC7C,MAAO,mBAAmBC,KAAMF,GAM9BG,IAH4B,eAAgBrE,OAAOD,WAAeC,OAAOD,UAAUuE,YAIrFL,GAAc,KAEf,IAEID,EFbUO,GAEjB,OACE,yBAAKzB,UAAU,OACb,yBAAKA,UAAU,OAAOC,IAAI,oBAAoBC,IAAI,wBAClD,2BAAIE,GACFc,EAAa,kBAAC,EAAD,MAAa,O,MGRlCQ,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.7c852c76.chunk.js","sourcesContent":["// Check that service workers are supported\nif ('serviceWorker' in navigator) {\n  // Use the window load event to keep the page load performant\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/service-worker.js')\n    .then(function(reg) { \n      console.log('Service Worker Registered'); \n      registeredServiceWorker = reg;\n\n      if(reg.pushManager) {\n\n        reg.pushManager.getSubscription().then(function(sub) {\n          if (sub === null) {\n            if(Notification.permission == \"granted\") {\n              subscribeUser();\n            }\n          } else {\n            // We have a subscription, update the database\n            updateSubscriptionOnServer(sub);\n          }\n        })\n        .catch(function(e){\n          console.log(e);\n        });\n  \n      }\n\n    });\n\n  });\n\n}\n\nvar registeredServiceWorker = null;\n\nfunction urlB64ToUint8Array(base64String) {\n\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nfunction subscribeUser() {\n  const applicationServerKey = urlB64ToUint8Array(window.PUSH_PUBLIC_KEY);\n  registeredServiceWorker.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: applicationServerKey\n  })\n  .then(function(subscription) {\n    console.log('User is subscribed.');\n\n    updateSubscriptionOnServer(subscription);\n  \n  })\n  .catch(function(err) {\n    console.log('Failed to subscribe the user: ', err);\n  });\n}\n\nfunction updateSubscriptionOnServer(subscription, callback) {\n  console.log(\"persist to server\", JSON.stringify(subscription));\n  // var request = new XMLHttpRequest();\n  // request.open('POST', '/subscriptions', true);\n  // request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n  \n  // request.onload = function() {\n  //   if (request.status >= 200 && request.status < 400) {\n  //     // Success!\n  //     var data = JSON.parse(request.responseText);\n  //     if(callback) callback(request, data);\n  //   } else {\n  //     // We reached our target server, but it returned an error\n  //     if(callback) callback(request, null);\n  //   }\n  // };\n\n  // request.onerror = function(err) {\n  //   // There was a connection error of some sort\n  //   if(callback) callback(request, null, err);\n  // };\n  \n  // request.send(JSON.stringify(subscription));\n}","import React, {useEffect, useState} from 'react';\n\nfunction Prompt() {\n  const [style, setStyle] = useState(\"\");\n\n  useEffect(() => {\n    \n    // if(localStorage.getItem('promptDisplayed')!== true) {\n      setTimeout(()=>{\n        setStyle('show')\n        // localStorage.setItem('promptDisplayed', true);\n      },500)\n    // }\n    \n  });\n\n  return (\n    <div className={`prompt ${style}`}>\n      Install this webapp on your iphone: tap <img src=\"/home.png\" alt=\"iOS home button\" /> \n      and then add to homescreen.\n    </div>\n  );\n}\n\nexport default Prompt;\n","import React from 'react';\nimport useFortune from './useFortune';\nimport useIOSPrompt from './useIOSPrompt';\nimport Prompt from './Prompt';\n\nfunction App() {\n  var fortune = useFortune();\n  var showPrompt = useIOSPrompt();\n\n  return (\n    <div className=\"App\">\n      <img className=\"logo\" src=\"/logo-512x512.png\" alt=\"Fortune Cookie logo\" />\n      <p>{fortune}</p>\n      { showPrompt ? <Prompt /> : null}\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\nimport 'whatwg-fetch'\n\nexport default function useFortune() {\n  const [fortune, setFortune] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData(){\n      let fortunes = await fetch('https://fortunecookieapi.herokuapp.com/v1/fortunes/').then(res => res.json())\n      if(fortunes){\n        let rando = Math.floor(Math.random() * fortunes.length) + 1  \n        setFortune(fortunes[rando].message);\n      }\n    }\n    fetchData();\n  }, []);\n\n  return fortune;\n}","import { useEffect, useState } from 'react';\n\nexport default function useIOSPrompt() {\n  const [showPrompt, setShowPrompt] = useState(false);\n\n  useEffect(() => {\n    // Detects if device is on iOS \n    let isIos = function() {\n      const userAgent = window.navigator.userAgent.toLowerCase();\n      return /iphone|ipad|ipod/.test( userAgent );\n    }\n    // Detects if device is in standalone mode\n    let isInStandaloneMode = () => ('standalone' in window.navigator) && (window.navigator.standalone);\n\n    // Checks if should display install popup notification:\n    if (isIos() && !isInStandaloneMode()) {\n      setShowPrompt(true);\n    }\n  }, [])\n\n  return showPrompt;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}